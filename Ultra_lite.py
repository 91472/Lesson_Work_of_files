# Урок: Работа с файлами. Кодировки, сериализация данных, json
# Задание Ultra Lite:
# 1. Вручную создайте текстовый файл с данными (например, марка авто, модель авто, расход топлива, стоимость).
# 2. Создайте шаблон документа doc
# 3. Внесите данные из файла в шаблон

# Выполнение задания Ultra Lite:
# 1. Вручную создан текстовый файл cars.txt и добален в корневую директорию с проектом.
# 2. Создан шаблон документа Template.docx и и добален в корневую директорию с проектом.
# 3. Код программы для внесения данных из файла cars.txt в шаблон Template.docx:

from docxtpl import DocxTemplate #импортируем из библиотеки docxtpl класс DocxTemplate для создания шаблона .docx
import datetime #импортируем библиотеку datetime для работы с датами и временем

with open('cars.txt') as f: #открываем файл cars.txt в режиме чтения через менеджер контекста
     keys = [] #создаем пустой список ключей будущего словаря
     values = [] #создаем пустой список значений будущего словаря
     f.seek(55, 0) #курсор возвращаем на начало второй строки (пропускаем строку-заголовок)
     for i,j in enumerate(f): #"итерация с счетчиком", перебираем все строки потока f начиная с 2-й
          #в теле итератора наполняем списки (keys, values) необходимыми ключами и значения для этих ключей:
          keys.extend(['make_of_car'+str(i+1), 'car_model'+str(i+1), 'swept_volume'+str(i+1), 'fuel_economy'+str(i+1), 'price'+str(i+1)])
          values.extend(j.rstrip().split(',')) #из каждой строки j удаляем символ '\n', переводим в список (разделитель ,)
context = dict(zip(keys, values)) #создаем словарь из списка-ключей (keys) и списка-значений (values)
context.update({'date': str(datetime.datetime.now().date())}) #добаляем в словарь элемент с текущей датой
template = DocxTemplate('Template.docx') #создаем объект template класса DocxTemplate из шаблона 'Template.docx'
template.render(context) #рендерим (наполянем, заполняем) шаблон из словаря context
template.save('top_avto_report.docx') #сохраняем сгенерированный отчет 'top_avto_report.docx'